#!/command/with-contenv bash
#-----------------------------------------------------------------------------
# Container Scheduling Configuration Script
#
# Purpose: Configure scheduling backend (cron) for container based on
#          environment variables and default configurations
# Context: Executed during container initialization phase after monitoring setup
#          Configures scheduled tasks before services start
# Note: This script requires ENABLE_CRON environment variable to be set for
#       scheduling features to be activated
#-----------------------------------------------------------------------------



#-----------------------------------------------------------------------------
# ENVIRONMENT INITIALIZATION
#-----------------------------------------------------------------------------
# Load container functions library and initialize environment
source /assets/functions/00-container
output_off
prepare_service single
PROCESS_NAME="scheduling"

#-----------------------------------------------------------------------------
# SCHEDULING BACKEND CONFIGURATION
#-----------------------------------------------------------------------------
# Enable or disable scheduling based on environment variable
if var_false "${ENABLE_CRON}" ; then 
  CONTAINER_ENABLE_SCHEDULING=FALSE 
fi

if var_true "${ENABLE_CRON}" ; then
  CONTAINER_ENABLE_SCHEDULING=TRUE
  CONTAINER_SCHEDULING_BACKEND="cron"
fi

#-----------------------------------------------------------------------------
# SCHEDULING SERVICE SETUP
#-----------------------------------------------------------------------------
# Configure scheduling backend if enabled
if var_false "${CONTAINER_ENABLE_SCHEDULING}" ; then
  print_debug "Disabling Scheduling"
  service_stop "$(basename "$0")"
else
  case "${CONTAINER_SCHEDULING_BACKEND,,}" in
    "cron" )
      # Create temporary directory for cron configuration
      mkdir -p /tmp/.container/cron

      #-----------------------------------------------------------------------------
      # CRON LOGGING CONFIGURATION
      #-----------------------------------------------------------------------------
      # Set up file-based logging for cron if specified
      if [ "${SCHEDULING_LOG_TYPE,,}" = "file" ] ; then
        mkdir -p "${SCHEDULING_LOG_LOCATION}"
        touch "${SCHEDULING_LOG_LOCATION}"/cron.log
        create_logrotate cron "${SCHEDULING_LOG_LOCATION}"/cron.log
      fi

      #-----------------------------------------------------------------------------
      # CRON ENVIRONMENT VARIABLES PROCESSING
      #-----------------------------------------------------------------------------
      # Create scheduling directory if it doesn't exist
      if [ ! -d "${CONTAINER_SCHEDULING_LOCATION}" ]; then 
        mkdir -p "${CONTAINER_SCHEDULING_LOCATION}" 
      fi
      
      # Extract CRON_ environment variables and create temporary file
      cronenv=$(mktemp)
      set -o posix; set -f ; set | grep -E '^CRON_'| sed "s|CRON_||g" > ${cronenv}
      sed -i "/^PERIOD/d" "${cronenv}"
      
      # Process each CRON_ environment variable
      while IFS= read -r cron_entry; do
        schedule_title="$(echo ${cron_entry} | cut -d = -f1 | tr '[:upper:]' '[:lower:]' )"
        schedule_value="$(echo ${cron_entry} | cut -d = -f2 )"
        schedule_value="$(echo ${schedule_value:1:-1})"
        
        # Create disabled cron entry if value is false
        if var_false "${schedule_value}" ; then
          print_debug "Disabling ${schedule_title} scheduled task"
          cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title}"
# Nulled execution of command  generated by Environment Variable defined in Image build, or Runtime argument
# Entered Value: ${schedule}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')
EOF
        else
          # Create active cron entry with schedule value
          print_debug "Adding ${schedule_title} with to be parsed by ${CONTAINER_SCHEDULING_BACKEND}"
          cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title}"
# Scheduled execution of command created automatically generated by Environment Variable defined in Image build, or Runtime argument
# Entered Value: ${schedule}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

${schedule_value}
EOF
        fi
      done < ${cronenv}
      
      # Clean up temporary file and variables
      rm -rf $cronenv
      set +f
      unset cronenv schedules cron_entry schedule_value schedule_title
      unset "${!CRON_@}"

      #-----------------------------------------------------------------------------
      # DEFAULT CONFIGURATIONS PROCESSING
      #-----------------------------------------------------------------------------
      # Process CRON_ variables from default configuration files
      for d in /assets/defaults/* ; do
        if [ "$d" != "/assets/defaults/00-container" ] ; then
          # shellcheck source=/assets/defaults/
          output_off
          source $d
          output_on
          
          # Extract CRON_ variables from sourced defaults
          cronenv=$(mktemp)
          set -o posix; set -f ; set | grep -E '^CRON_'| sed "s|CRON_||g" > "${cronenv}"
          sed -i "/^PERIOD/d" "${cronenv}"
          
          # Process each CRON_ variable from defaults
          while IFS= read -r cron_entry; do
            schedule_title="$(echo ${cron_entry} | cut -d = -f1 | tr '[:upper:]' '[:lower:]')"
            schedule_value="$(echo ${cron_entry} | cut -d = -f2 )"
            schedule_value="$(echo ${schedule_value:1:-1})"
            
            # Only create cron entry if it doesn't already exist
            if [ ! -f "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title,,}" ] ; then
              print_debug "Adding $schedule_title with value $schedule_value to crontab"
              cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title,,}"
# Scheduled execution of command taken from default file: '${d}'
# Entered Value: ${schedule}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

${schedule_value}
EOF
            else
              print_debug "Skipping adding '${schedule_title}' as it already exists"
            fi
          done < "${cronenv}"
          
          # Clean up temporary file and variables
          rm -rf $cronenv
          set +f
          unset cronenv schedules cron_entry schedule_value schedule_title
          unset "${!CRON_@}"
        fi
      done
      print_notice "Container configured for scheduled tasks with 'cron'"
    ;;
    *)
      print_error "Unknown Scheduling Backend"
      exit 1
    ;;
  esac
fi

#-----------------------------------------------------------------------------
# SCRIPT COMPLETION
#-----------------------------------------------------------------------------
# Mark scheduling configuration as complete
liftoff
output_on
