#!/command/with-contenv bash
#-----------------------------------------------------------------------------
# Container Permissions Management Script
#
# Purpose: Configure user and group permissions for container based on environment
#          variables, including UID/GID mapping and group membership management
# Context: Executed during container initialization phase after timezone setup
#          Manages user and group permissions before services start
# Note: This script requires ENABLE_PERMISSIONS environment variable to be set
#       for permission management features to be activated
#-----------------------------------------------------------------------------



#-----------------------------------------------------------------------------
# ENVIRONMENT INITIALIZATION
#-----------------------------------------------------------------------------
# Load container functions library and initialize environment
source /assets/functions/00-container
output_off
# shellcheck disable=SC2034
PROCESS_NAME="permissions"

#-----------------------------------------------------------------------------
# PERMISSION FEATURE CONFIGURATION
#-----------------------------------------------------------------------------
# Enable or disable permissions management based on environment variable
if var_true "${ENABLE_PERMISSIONS}" ; then
  CONTAINER_ENABLE_PERMISSIONS=TRUE
elif var_false "${ENABLE_PERMISSIONS}" ; then
  CONTAINER_ENABLE_PERMISSIONS=FALSE
fi

# Enable debug mode for permission-related operations if specified
if var_true "${DEBUG_PERMISSIONS}" ; then
  CONTAINER_LOG_LEVEL="DEBUG"
fi

#-----------------------------------------------------------------------------
# USER AND GROUP PERMISSION MANAGEMENT
#-----------------------------------------------------------------------------
# Process user and group permissions if enabled
if var_true "${CONTAINER_ENABLE_PERMISSIONS}" ; then
  print_debug "Enabling permissions features"

  #-----------------------------------------------------------------------------
  # USER UID MAPPING
  #-----------------------------------------------------------------------------
  # Extract user names and UIDs from environment variables
  unames="$(set -o posix ; set | sort | grep -e '^USER_' | sed "s|^USER_||g" | tr '[:upper:]' '[:lower:]' | tr ' ' '\n') "
  unames+="$(set -o posix ; set | sort | grep -e '^CONTAINER_USER_' | sed "s|^CONTAINER_USER_||g" | tr '[:upper:]' '[:lower:]' | tr ' ' '\n')"

  # Process each user UID mapping
  for upair in $unames; do
    uname=$(echo $upair | cut -d = -f 1)
    uid=$(echo $upair | cut -d = -f 2)
    
    # Check if user exists in /etc/passwd
    if grep -e "^${uname}" /etc/passwd > /dev/null; then
      _userexists=true
    elif grep -e "^${uname/_/-}" /etc/passwd > /dev/null; then
      _userexists=true
      uname=${uname/_/-}
    fi
    
    # Update user UID if user exists
    if [ "${_userexists}" = true ] ; then
      ouid=$(grep -e "^${uname}" /etc/passwd | awk -F: '{print $3}')
      print_debug "Changing user '${uname}' to uid '${uid}' from '${ouid}'"
      sed -i "s|${uname}:x:${ouid}:|${uname}:x:${uid}:|g" /etc/passwd
    fi
  done

  #-----------------------------------------------------------------------------
  # GROUP GID MAPPING
  #-----------------------------------------------------------------------------
  # Extract group names and GIDs from environment variables
  groups="$(set -o posix ; set | sort | grep -e '^GROUP_' | sed "s|^GROUP_||g" | tr '[:upper:]' '[:lower:]' | tr ' ' '\n' | sed '/add_.*/d' ) "
  groups+="$(set -o posix ; set | sort | grep -e '^CONTAINER_GROUP_' | sed "s|^CONTAINER_GROUP_||g" | tr '[:upper:]' '[:lower:]' | tr ' ' '\n' | sed '/add_.*/d' ) "

  # Process each group GID mapping
  for gpair in $groups; do
    gname=$(echo $gpair | cut -d = -f 1)
    gid=$(echo $gpair | cut -d = -f 2)
    
    # Check if group exists in /etc/group
    if grep -e "^${gname}" /etc/group > /dev/null; then
      _groupexists=true
    elif grep -e "^${gname/_/-}" /etc/group > /dev/null; then
      _groupexists=true
      gname=${gname/_/-}
    fi

    # Update group GID if group exists
    if [ "${_groupexists}" = true ] ; then
      opu=$(grep -e "^${gname}" /etc/passwd | awk -F: '{print $1}')
      opuid=$(grep -e "^${gname}" /etc/passwd | awk -F: '{print $3}')
      opgid=$(grep -e "^${gname}" /etc/passwd | awk -F: '{print $4}')
      og=$(grep -e "^${gname}" /etc/group | awk -F: '{print $1}')
      oggid=$(grep -e "^${gname}" /etc/group | awk -F: '{print $3}')
      print_debug "Changing group '${gname}' to gid '${gid}' from '${oggid}'"
      sed -i "s|\(.*\):\(.*\):\(.*\):${opgid}:|\1:\2:\3:${gid}:|g" /etc/passwd
      sed -i "s|${og}:x:${oggid}|${og}:x:${gid}|g" /etc/group
    fi
  done

  #-----------------------------------------------------------------------------
  # GROUP MEMBERSHIP MANAGEMENT
  #-----------------------------------------------------------------------------
  # Extract group membership additions from environment variables
  groupsadd="$(set -o posix ; set | sort | grep -e '^GROUP_ADD_' | sed 's|^GROUP_ADD_||g' | tr '[:upper:]' '[:lower:]' ) "
  groupsadd+="$(set -o posix ; set | sort | grep -e '^CONTAINER_GROUP_ADD_' | sed 's|^CONTAINER_GROUP_ADD_||g' | tr '[:upper:]' '[:lower:]' )"

  # Process each group membership addition
  for gau in $groupsadd; do
    gname=$(echo ${gau} | cut -d = -f1 )
    
    # Check if group exists in /etc/group
    if grep -e "^${gname}" /etc/group > /dev/null; then
      _groupexists=true
    elif grep -e "^${gname/_/-}" /etc/group > /dev/null; then
      _groupexists=true
      gname=${gname/_/-}
    fi

    # Add users to group if group exists
    if [ "${_groupexists}" = true ] ; then
      uta=$(echo ${gau} | cut -d = -f2 | tr ',' '\n')
      for userstogroup in ${uta} ; do
        print_debug "Adding user '${userstogroup}' to '${gname}'"
        os=$(cat /etc/os-release |grep ^ID= | cut -d = -f2)
        
        # Use distribution-specific group management commands
        case ${os,,} in
          "alpine" )
            silent addgroup ${userstogroup} ${gname}
          ;;
          "debian" | "ubuntu" )
            silent usermod -a -G ${gname} ${userstogroup}
          ;;
        esac
      done
    fi
  done
fi

#-----------------------------------------------------------------------------
# SCRIPT COMPLETION
#-----------------------------------------------------------------------------
# Mark permissions configuration as complete
liftoff
output_on
