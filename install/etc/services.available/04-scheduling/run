#!/command/with-contenv bash
#-----------------------------------------------------------------------------
# Scheduling Service Runner
#
# Purpose: Start and manage scheduling backend services (cron) for container
#          based on environment variables and configuration files
# Context: Executed by s6-overlay during service startup phase after
#          container initialization and scheduling configuration
# Note: Supports cron backend with file-based logging and logrotate integration
#       Requires CONTAINER_SCHEDULING_BACKEND environment variable to be set
#-----------------------------------------------------------------------------



#-----------------------------------------------------------------------------
# ENVIRONMENT INITIALIZATION
#-----------------------------------------------------------------------------
# Load container functions library and initialize service environment
source /assets/functions/00-container
PROCESS_NAME="scheduling"
output_off
prepare_service
check_container_initialized
check_service_initialized init

#-----------------------------------------------------------------------------
# LOGROTATE CONFIGURATION
#-----------------------------------------------------------------------------
# Configure logrotate retention settings if enabled
if var_true "${CONTAINER_ENABLE_LOGROTATE}" ; then
  print_debug "[logrotate] Setting Logrotate retention days after all services have finished initializing"
  mkdir -p /etc/logrotate.d
  print_debug "[logrotate] Moving files from /assets/logrotate to /etc/logrotate.d"
  cp -R /assets/logrotate/* /etc/logrotate.d
  sed -i "s|rotate .*|rotate ${LOGROTATE_RETAIN_DAYS}|g" /etc/logrotate.d/*
  sed -i "s|//|/|g" /etc/logrotate.d/*
  chown -R root:root /etc/logrotate.d
  chmod -R 0644 /etc/logrotate.d
fi

liftoff

#-----------------------------------------------------------------------------
# SCHEDULING BACKEND EXECUTION
#-----------------------------------------------------------------------------
# Start scheduling backend based on configuration
case "${CONTAINER_SCHEDULING_BACKEND}" in
  "cron" )
    # Configure cron logging if file-based logging is enabled
    if [ "${SCHEDULING_LOG_TYPE,,}" = "file" ]; then
      cron_log_file="-L ${SCHEDULING_LOG_LOCATION}/cron.log"
    fi

    # Parse and configure cron jobs from scheduling location
    print_debug "Parsing all files from ${CONTAINER_SCHEDULING_LOCATION}"
    temp_crontab=$(date +%s)
    echo 'MAILTO=""' > $temp_crontab
    
    # Create empty file if scheduling directory is empty to prevent errors
    if dir_empty "${CONTAINER_SCHEDULING_LOCATION}" ; then 
      echo "# Intentionally empty" > "${CONTAINER_SCHEDULING_LOCATION}"/empty 
    fi
    
    # Parse all cron files, remove comments, and add to temporary crontab
    sed "/#/d" "${CONTAINER_SCHEDULING_LOCATION}"/* | awk 'NF' >> /tmp/.container/cron/${temp_crontab}
    silent crontab -r
    crontab /tmp/.container/cron/${temp_crontab}

    # Start cron daemon based on operating system
    print_start "Starting cron"
    os=$(cat /etc/os-release |grep ^ID= | cut -d = -f2)
    case ${os} in
      "alpine" )
        output_on
        exec /usr/sbin/crond -f -l ${SCHEDULING_LOG_LEVEL} ${cron_log_file}
      ;;
      "debian" | "ubuntu" )
        output_on
        exec /usr/sbin/crond -f -l ${SCHEDULING_LOG_LEVEL} ${cron_log_file}
      ;;
    esac
  ;;
esac
